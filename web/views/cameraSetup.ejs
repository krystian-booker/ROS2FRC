<h1 class='mb-3'>Camera Setup</h1>
<p class='text-muted'>Configure and test your cameras.</p>

<style>
    .border-dashed {
        border: 2px dashed #ced4da;
    }

    /* make card a positioning context */
    .card.position-relative {
        position: relative;
    }

    /* overlay buttons container, hidden by default */
    .overlay-buttons {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        display: none;
        gap: 0.25rem;
    }

    /* show on hover */
    .card.position-relative:hover .overlay-buttons {
        display: flex;
    }

    /* ensure modal text is dark */
    #confirmDeleteModal .modal-header .modal-title,
    #confirmDeleteModal .modal-body {
        color: #000 !important;
    }
</style>

<div class='row g-3' id='cameraCards'>
    <div class='col-12 col-md-6' id='addCardCol'>
        <div id='addCard' class='card h-100 d-flex align-items-center justify-content-center p-5 border-dashed'
            role='button'>
            <span class='display-4'>&#43;</span>
            <span class='fw-semibold mt-2'>Add Camera</span>
        </div>
    </div>
</div>

<template id="cameraFormTemplate">
    <div class="col-12 col-md-6">
        <form class="card camera-form">
            <div class="card-header d-flex justify-content-between align-items-center">
                <strong>Camera</strong>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input class="form-control" name="name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Serial</label>
                    <input class="form-control" name="serial" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">Role</label>
                    <select class="form-select" name="role" required>
                        <option value="">Select role…</option>
                        <option value="solo">Solo</option>
                        <option value="primary">Primary</option>
                        <option value="secondary">Secondary</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Video Mode</label>
                    <select class="form-select" name="video_mode" required>
                        <option value="">Select mode…</option>
                        <option value="Mode0">Mode0</option>
                        <option value="Mode1">Mode1</option>
                        <option value="Mode2">Mode2</option>
                        <option value="Mode5">Mode5</option>
                    </select>
                </div>
            </div>

            <div class="card-footer text-end">
                <button type="button" class="btn btn-secondary me-2 cancel-form">Cancel</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </form>
    </div>
</template>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmDeleteLabel">Confirm Delete</h5>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this camera?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const cameraCards = document.getElementById('cameraCards');
        const addCardCol = document.getElementById('addCardCol');
        const addCard = document.getElementById('addCard');
        const formTpl = document.getElementById('cameraFormTemplate');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const deleteModalEl = document.getElementById('confirmDeleteModal');
        const deleteModal = new bootstrap.Modal(deleteModalEl);
        let cameraToDeleteSerial = null;

        // Fetch & render existing cameras
        fetch('/api/cameras')
            .then(r => r.json())
            .then(data => {
                const cams = (data.camera_config?.cameras) || [];
                cams.forEach(renderCameraCard);
            })
            .catch(err => console.error('Could not load cameras:', err));

        // Confirm‐delete handler (only once)
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!cameraToDeleteSerial) return;
            try {
                const res = await fetch(`/api/cameras/${cameraToDeleteSerial}`, { method: 'DELETE' });
                if (!res.ok) {
                    let errMsg = 'Delete failed';
                    try {
                        const body = await res.json();
                        errMsg = body.error || errMsg;
                    } catch { }
                    throw new Error(errMsg);
                }
                const col = document
                    .querySelector(`.card[data-serial="${cameraToDeleteSerial}"]`)
                    ?.closest('.col-12');
                if (col) col.remove();

                cameraToDeleteSerial = null;
                deleteModal.hide();
            } catch (err) {
                console.error(err);
                alert(err.message);
            }
        });

        // “Add” → show blank form
        addCard.addEventListener('click', () => {
            const frag = formTpl.content.cloneNode(true);
            const formCol = frag.querySelector('.col-12.col-md-6');
            const form = formCol.querySelector('form');

            form.classList.remove('show');
            addCardCol.replaceWith(formCol);
            requestAnimationFrame(() => form.classList.add('show'));

            form.querySelector('.cancel-form').addEventListener('click', () => {
                formCol.remove();
                cameraCards.appendChild(addCardCol);
            });

            form.addEventListener('submit', async ev => {
                ev.preventDefault();
                try {
                    const data = Object.fromEntries(new FormData(form).entries());
                    const res = await fetch('/api/cameras', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                    });
                    if (!res.ok) throw new Error('Save failed');
                    const saved = await res.json();
                    formCol.remove();
                    cameraCards.appendChild(addCardCol);
                    renderCameraCard(saved);
                } catch (err) {
                    alert(err.message);
                }
            });
        });

        // Renders a camera card and attaches edit/delete logic
        function renderCameraCard(camera) {
            const prettyRole = camera.role.charAt(0).toUpperCase() + camera.role.slice(1);
            const col = document.createElement('div');
            col.className = 'col-12 col-md-6';
            col.innerHTML = `
                <div class="card h-100 position-relative" data-serial="${camera.serial}">
                <div class="overlay-buttons">
                    <button class="btn btn-sm btn-success edit-btn">
                    <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-danger delete-btn">
                    <i class="bi bi-trash"></i>
                    </button>
                </div>
                <div class="card-header">
                    <strong>${camera.name || camera.serial}</strong>
                </div>
                <div class="card-body">
                    <p><strong>Serial:</strong> ${camera.serial}</p>
                    <p><strong>Role:</strong> ${prettyRole}</p>
                    <p><strong>Video Mode:</strong> ${camera.video_mode}</p>
                </div>
                </div>
            `;
            cameraCards.insertBefore(col, addCardCol);

            // Delete button → open modal
            col.querySelector('.delete-btn').addEventListener('click', () => {
                cameraToDeleteSerial = camera.serial;
                deleteModal.show();
            });

            // Edit button → inline form
            col.querySelector('.edit-btn').addEventListener('click', () => {
                const frag = formTpl.content.cloneNode(true);
                const formCol = frag.querySelector('.col-12.col-md-6');
                const form = formCol.querySelector('form');
                const thisCol = col;
                const nextSibling = thisCol.nextSibling;

                // Pre-fill and lock serial
                form.serial.value = camera.serial;
                form.name.value = camera.name;
                form.role.value = camera.role;
                form.video_mode.value = camera.video_mode;
                form.serial.readOnly = true;

                // Swap in place
                thisCol.replaceWith(formCol);
                requestAnimationFrame(() => form.classList.add('show'));

                // Cancel → restore card
                form.querySelector('.cancel-form').addEventListener('click', () => {
                    formCol.remove();
                    cameraCards.insertBefore(thisCol, nextSibling);
                });

                // Submit → PUT update
                form.addEventListener('submit', async ev => {
                    ev.preventDefault();
                    try {
                        const data = Object.fromEntries(new FormData(form).entries());
                        const res = await fetch(`/api/cameras/${camera.serial}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data),
                        });
                        if (!res.ok) throw new Error('Update failed');
                        const updated = await res.json();
                        formCol.remove();

                        // Update text in-place
                        const card = thisCol.querySelector('.card');
                        card.querySelector('.card-header strong')
                            .textContent = updated.name || updated.serial;
                        const ps = card.querySelectorAll('.card-body p');
                        ps[0].innerHTML = `<strong>Serial:</strong> ${updated.serial}`;
                        ps[1].innerHTML = `<strong>Role:</strong> ${updated.role}`;
                        ps[2].innerHTML = `<strong>Video Mode:</strong> ${updated.video_mode}`;

                        // Restore position
                        cameraCards.insertBefore(thisCol, nextSibling);
                    } catch (err) {
                        alert(err.message);
                    }
                });
            });
        }
    });
</script>